swagger: "2.0"
info:
  title: ProjectQ API
  version: "1.0.0"
# the domain of the service
host: "localhost:3001"
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /topics:
    get:
      summary: List of Topics
      description: |
        The Topics endpoint returns information about all available topics in
        the database. The response includes a topic id and name.
        proper display order.
      tags:
        - Topics
      responses:
        200:
          description: An array of topics
          schema:
            type: array
            items:
              $ref: "#/definitions/Topic"
  /questions:
    get:
      summary: List of Questions
      description: |
        The Questions endpoint returns information about all available questions in
        the database.
      parameters:
        - name: topicId
          in: query
          description: An id associated with a topic to filter results by.
          required: false
          type: string
        - name: sortBy
          in: query
          description: Options to sort results by. [Popular, Answers, Topics, Date]
          required: false
          type: string
        - name: query
          in: query
          description: Filter questions results by keyword.
          required: false
          type: string
      tags:
        - Questions and Answers
      responses:
        200:
          description: Response of questions and info about the query result
          schema:
            type: object
            properties:
              pageNum:
                type: integer
                format: int32
                description: Current response page num.
              questionsPerPage:
                type: integer
                format: int32
                description: Number of questions per page.
              totalNumQuestions:
                type: integer
                format: int32
                description: Total number of questions.
              questions:
                type: array
                items:
                  $ref: "#/definitions/QuestionSearch"
  "/question/{questionId}":
    get:
      summary: Details on an individual question
      description: |
        The Question endpoint returns information about specified question param.
      parameters:
        - name: questionId
          in: path
          description: The ID of the desired question detail.
          required: true
          type: string
      tags:
        - Questions and Answers
      responses:
        200:
          description: Response of questions and info about the query result
          schema:
            $ref: "#/definitions/QuestionDetail"
  "/question/{questionId}/answers":
    get:
      summary: List of specified question's answers
      description: |
        The answers endpoint returns the list of answers associated with the specified question.
      parameters:
        - name: questionId
          in: path
          description: The ID of the desired question detail.
          required: true
          type: string
        - name: sortBy
          in: query
          description: Options to sort answers result by. [Popular, Date]
          required: false
          type: string
      tags:
        - Answers
      responses:
        200:
          description: Response of questions and info about the query result
          schema:
            type: object
            properties:
              pageNum:
                type: integer
                format: int32
                description: Current response page num.
              answersPerPage:
                type: integer
                format: int32
                description: Number of questions per page.
              totalNumAnswers:
                type: integer
                format: int32
                description: Total number of questions.
              answers:
                type: array
                items:
                  $ref: "#/definitions/AnswerDetail"
  "/answer/{answerId}/comment":
    post:
      summary: Create a comment on the specified answer.
      description: |
        Adds the provided comment to the answer in the database.
      parameters:
        - name: answerId
          in: path
          description: The ID of the answer to add the comment to.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The comment to add to the database.
          schema:
            $ref: "#/definitions/NewComment"
      tags:
        - Comments
      responses:
        200:
          description: Returns the added comment.
          schema:
            $ref: "#/definitions/CommentDetail"
  "/answer/{answerId}/upvote":
    post:
      summary: Upvotes specified answer.
      description: |
        Sets upvote state on specified answer.
      parameters:
        - name: answerId
          in: path
          description: The ID of the answer to modify score.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The state to set upvote status to.
          schema:
            $ref: "#/definitions/UpvoteState"
      tags:
        - Answers
      responses:
        200:
          description: Returns state about the modified answer.
          schema:
            $ref: "#/definitions/AnswerVoteState"
  "/answer/{answerId}/downvote":
    post:
      summary: Downvotes specified answer.
      description: |
        Sets downvote state on specified answer.
      parameters:
        - name: answerId
          in: path
          description: The ID of the answer to modify score.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The state to set downvote status to.
          schema:
            $ref: "#/definitions/DownvoteState"
      tags:
        - Answers
      responses:
        200:
          description: Returns state about the modified answer.
          schema:
            $ref: "#/definitions/AnswerVoteState"
  "/comment/{commentId}/upvote":
    post:
      summary: Upvotes specified comment.
      description: |
        Sets upvote state on specified comment.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to modify score.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The state to set upvote status to.
          schema:
            $ref: "#/definitions/UpvoteState"
      tags:
        - Comments
      responses:
        200:
          description: Returns state about the modified comment.
          schema:
            $ref: "#/definitions/CommentVoteState"
  "/comment/{commentId}/downvote":
    post:
      summary: Downvotes specified comment.
      description: |
        Sets downvote state on specified comment.
      parameters:
        - name: commentId
          in: path
          description: The ID of the comment to modify score.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The state to set downvote status to.
          schema:
            $ref: "#/definitions/DownvoteState"
      tags:
        - Comments
      responses:
        200:
          description: Returns state about the modified comment.
          schema:
            $ref: "#/definitions/CommentVoteState"
  /user:
    get:
      summary: Details on the current user
      description: |
        The user endpoint returns detailed information about the logged in user and their questions and answers.
      parameters:
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
      tags:
        - User
      responses:
        200:
          description: Response with information about current user.
          schema:
            $ref: "#/definitions/UserDetail"
  /question:
    post:
      summary: Create a question
      description: |
        Adds the provided question information to the database.
      parameters:
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The question to add to the database
          schema:
            $ref: "#/definitions/NewQuestion"
      tags:
        - Questions and Answers
      responses:
        200:
          description: Returns the added question.
          schema:
            $ref: "#/definitions/QuestionDetail"
  "/question/{questionId}/answer":
    post:
      summary: Create an answer on the specified question
      description: |
        Adds the provided answer to the database.
      parameters:
        - name: questionId
          in: path
          description: The ID of the question to add the answer to.
          required: true
          type: string
        - name: loginId
          in: header
          description: This will be fleshed out later.
          required: true
          type: string
        - in: body
          name: body
          required: true
          description: The answer to add to the database. Credential field is optional and will add the credential to the user in the process.
          schema:
            $ref: "#/definitions/NewAnswer"
      tags:
        - Questions and Answers
      responses:
        200:
          description: Returns the added question.
          schema:
            $ref: "#/definitions/AnswerDetail"
definitions:
  Topic:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific topic.
      name:
        type: string
        description: Name of the topic.
  NewAnswer:
    type: object
    properties:
      answer:
        type: string
        description: The answer string.
      credential:
        type: string
        description: Optional new credential for answering user.
  NewComment:
    type: object
    properties:
      comment:
        type: string
        description: The comment string.
  NewQuestion:
    type: object
    properties:
      topics:
        type: array
        description: Array of topic ids.
        items:
          type: string
      question:
        type: string
        description: The question string.
  UpvoteState:
    type: object
    properties:
      upvoted:
        type: boolean
        description: Whether or not the answer should be upvoted.
  DownvoteState:
    type: object
    properties:
      upvoted:
        type: boolean
        description: Whether or not the answer should be downvoted.
  AnswerVoteState:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an answer
      upvoted:
        type: boolean
        description: Whether or not the answer is upvoted.
      downvoted:
        type: boolean
        description: Whether or not the answer is upvoted.
      answerScore:
        type: integer
        format: int32
        description: Score for the answer (can be negative).
  CommentVoteState:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an comment
      upvoted:
        type: boolean
        description: Whether or not the comment is upvoted.
      downvoted:
        type: boolean
        description: Whether or not the comment is upvoted.
      answerScore:
        type: integer
        format: int32
        description: Score for the comment (can be negative).
  QuestionDetail:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific question
      topics:
        type: array
        items:
          $ref: "#/definitions/Topic"
      question:
        type: string
        description: The question string.
      questionScore:
        type: integer
        format: int32
        description: Score for the question (can be negative).
      answerCount:
        type: integer
        format: int32
        description: Number of answers.
  QuestionSearch:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific question
      topics:
        type: array
        items:
          $ref: "#/definitions/Topic"
      question:
        type: string
        description: The question string.
      questionScore:
        type: integer
        format: int32
        description: Score for the question (can be negative).
      answerCount:
        type: integer
        format: int32
        description: Number of answers.
      topAnswer:
        $ref: "#/definitions/AnswerShort"
  AnswerShort:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an answer
      questionId:
        type: string
        description: Unique identifier representing the question this answer is related to.
      user:
        $ref: "#/definitions/UserSmall"
      answer:
        type: string
        description: The answer.
      answerDate:
        type: string
        description: Date answer was created.
      answerScore:
        type: integer
        format: int32
        description: Score for the answer (can be negative).
      userUpvoted:
        type: boolean
        description: Whether or not the provided user has upvoted this answer.
      userDownvoted:
        type: boolean
        description: Whether or not the provided user has downvoted this answer.
  UserSmall:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a user
      userName:
        type: string
        description: Name of user
      userCred:
        type: string
        description: Credentials of the user
      userAvatar:
        type: string
        description: Image associated with user
  UserCommentSmall:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a user
      userName:
        type: string
        description: Name of user
      userAvatar:
        type: string
        description: Image associated with user
  UserDetail:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a user
      userName:
        type: string
        description: Name of user
      userCreds:
        type: array
        items:
          type: object
          properties:
            credential:
              type: string
              description: Credential description.
      userAvatar:
        type: string
        description: Image associated with user
      usersQuestions:
        type: array
        items:
          $ref: "#/definitions/QuestionDetail"
      usersAnswers:
        type: array
        items:
          $ref: "#/definitions/UserAnswerDetail"
  AnswerDetail:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an answer
      questionId:
        type: string
        description: Unique identifier representing the question this answer is related to.
      user:
        $ref: "#/definitions/UserSmall"
      answer:
        type: string
        description: The answer.
      answerDate:
        type: string
        description: Date answer was created.
      answerScore:
        type: integer
        format: int32
        description: Score for the answer (can be negative).
      userUpvoted:
        type: boolean
        description: Whether or not the provided user has upvoted this answer.
      userDownvoted:
        type: boolean
        description: Whether or not the provided user has downvoted this answer.
      comments:
        type: array
        items:
          $ref: "#/definitions/CommentDetail"
  CommentDetail:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an comment
      answerId:
        type: string
        description: Unique identifier representing the answer this comment is related to.
      user:
        $ref: "#/definitions/UserCommentSmall"
      comment:
        type: string
        description: The comment.
      commentDate:
        type: string
        description: Date comment was created.
      commentScore:
        type: integer
        format: int32
        description: Score for the comment (can be negative).
      userUpvoted:
        type: boolean
        description: Whether or not the provided user has upvoted this comment.
      userDownvoted:
        type: boolean
        description: Whether or not the provided user has downvoted this comment.
  UserAnswerDetail:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing an answer
      questionId:
        type: string
        description: Unique identifier representing the question this answer is related to.
      answer:
        type: string
        description: The answer.
      answerDate:
        type: string
        description: Date answer was created.
      answerScore:
        type: integer
        format: int32
        description: Score for the answer (can be negative).
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: Repeated Error Code
      message:
        type: string
        description: Message detailing the reasoning for the error
